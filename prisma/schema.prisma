// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  review        Review[]
  order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CATEGORY_TYPE {
  MANUFACTURER
  DEFAULT
}

model Category {
  id             Int           @id @default(autoincrement())
  name           String
  type           CATEGORY_TYPE @default(DEFAULT)
  product        Product[]     @relation("category-product")
  primaryProduct Product[]     @relation("category-primary-product")
}

model Product {
  id                Int          @id @default(autoincrement())
  name              String
  coverImage        String
  description       String       @default("")
  detailedImage     String[]
  price             Float
  currency          String       @default("TL")
  primaryCategory   Category     @relation("category-primary-product", fields: [primaryCategoryId], references: [id])
  primaryCategoryId Int
  category          Category[]   @relation("category-product")
  slug              String
  inCart            ItemInCart[]
  review            Review[]
  order             Order[]
  deal              Float        @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
}

model Cart {
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @id @unique
  item      ItemInCart[]
  total     Int          @default(0)
  updatedAt DateTime     @default(now()) @updatedAt
}

model ItemInCart {
  userId    String
  cart      Cart     @relation(fields: [userId], references: [userId])
  itemId    Int
  item      Product  @relation(fields: [itemId], references: [id])
  quantity  Int      @default(1)
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, itemId])
}

model Review {
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  score     Int

  @@id([userId, productId])
}

enum OrderStatus {
  WAITING
  ACCEPTED
  CARGO
  ON_THE_WAY
  DELIVERED
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  productId Int
  status    OrderStatus @default(WAITING)
  product   Product     @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}
